package tables

import (
	"encoding/binary"
	"fmt"
)

// Code generated by binarygen from kernx.go. DO NOT EDIT

func parseKernSubtable0(src []byte) (kernSubtable0, int, error) {
	var item kernSubtable0
	n := 0
	{
		subSlice := src[n:]
		if L := len(subSlice); L < 8 {
			return kernSubtable0{}, 0, fmt.Errorf("EOF: expected length: 8, got %d", L)
		}

		_ = subSlice[7] // early bound checking
		item.nPairs = binary.BigEndian.Uint16(subSlice[0:])
		item.searchRange = binary.BigEndian.Uint16(subSlice[2:])
		item.entrySelector = binary.BigEndian.Uint16(subSlice[4:])
		item.rangeShift = binary.BigEndian.Uint16(subSlice[6:])
		n += 8

	}
	{
		subSlice := src[n:]
		arrayLength := int(item.nPairs)
		if L := len(subSlice); L < +arrayLength*6 {
			return kernSubtable0{}, 0, fmt.Errorf("EOF: expected length: %d, got %d", +arrayLength*6, L)
		}

		item.pairs = make([]kernx0Record, arrayLength) // allocation guarded by the previous check
		for i := range item.pairs {
			item.pairs[i].mustParse(subSlice[+i*6:])
		}

		n += arrayLength * 6
	}
	return item, n, nil
}

func (item *kernx0Record) mustParse(src []byte) {
	_ = src[5] // early bound checking
	item.left = glyphID(binary.BigEndian.Uint16(src[0:]))
	item.right = glyphID(binary.BigEndian.Uint16(src[2:]))
	item.value = int16(binary.BigEndian.Uint16(src[4:]))
}

func parseKernx0Record(src []byte) (kernx0Record, int, error) {
	var item kernx0Record
	n := 0
	if L := len(src); L < 6 {
		return kernx0Record{}, 0, fmt.Errorf("EOF: expected length: 6, got %d", L)
	}

	item.mustParse(src)
	n += 6
	return item, n, nil
}

func parseKerxSubtable0(src []byte) (kerxSubtable0, int, error) {
	var item kerxSubtable0
	n := 0
	{
		subSlice := src[n:]
		if L := len(subSlice); L < 16 {
			return kerxSubtable0{}, 0, fmt.Errorf("EOF: expected length: 16, got %d", L)
		}

		_ = subSlice[15] // early bound checking
		item.nPairs = binary.BigEndian.Uint32(subSlice[0:])
		item.searchRange = binary.BigEndian.Uint32(subSlice[4:])
		item.entrySelector = binary.BigEndian.Uint32(subSlice[8:])
		item.rangeShift = binary.BigEndian.Uint32(subSlice[12:])
		n += 16

	}
	{
		subSlice := src[n:]
		arrayLength := int(item.nPairs)
		if L := len(subSlice); L < +arrayLength*6 {
			return kerxSubtable0{}, 0, fmt.Errorf("EOF: expected length: %d, got %d", +arrayLength*6, L)
		}

		item.pairs = make([]kernx0Record, arrayLength) // allocation guarded by the previous check
		for i := range item.pairs {
			item.pairs[i].mustParse(subSlice[+i*6:])
		}

		n += arrayLength * 6
	}
	return item, n, nil
}
