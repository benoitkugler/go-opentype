package tables

import (
	"encoding/binary"
	"fmt"
)

// Code generated by binarygen from name_src.go. DO NOT EDIT

func ParseName(src []byte) (Name, int, error) {
	var item Name
	n := 0
	{
		if L := len(src); L < 4 {
			return item, 0, fmt.Errorf("reading Name: "+"EOF: expected length: 4, got %d", L)
		}
		_ = src[3] // early bound checking
		item.version = binary.BigEndian.Uint16(src[0:])
		item.count = binary.BigEndian.Uint16(src[2:])
		n += 4
	}
	{
		if L := len(src); L < 6 {
			return item, 0, fmt.Errorf("reading Name: "+"EOF: expected length: 6, got %d", L)
		}
		offset := int(binary.BigEndian.Uint16(src[4:]))
		n += 2
		if L := len(src); L < offset {
			return item, 0, fmt.Errorf("reading Name: "+"EOF: expected length: %d, got %d", offset, L)
		}

		item.stringData = src[offset:]
		offset = len(src)
	}
	{
		arrayLength := int(item.count)

		if L := len(src); L < 6+arrayLength*12 {
			return item, 0, fmt.Errorf("reading Name: "+"EOF: expected length: %d, got %d", 6+arrayLength*12, L)
		}

		item.nameRecords = make([]nameRecord, arrayLength) // allocation guarded by the previous check
		for i := range item.nameRecords {
			item.nameRecords[i].mustParse(src[6+i*12:])
		}
		n += arrayLength * 12
	}
	return item, n, nil
}

func (item *nameRecord) mustParse(src []byte) {
	_ = src[11] // early bound checking
	item.platformID = PlatformID(binary.BigEndian.Uint16(src[0:]))
	item.encodingID = EncodingID(binary.BigEndian.Uint16(src[2:]))
	item.languageID = LanguageID(binary.BigEndian.Uint16(src[4:]))
	item.nameID = NameID(binary.BigEndian.Uint16(src[6:]))
	item.length = binary.BigEndian.Uint16(src[8:])
	item.stringOffset = binary.BigEndian.Uint16(src[10:])
}
